<div class="alert alert-info" role="alert">
  <h3>Теоретические сведения</h3>
  <strong>Внимание!</strong>
  Данный материал предполагает что у вас уже есть базовые знания JavaScript и jQuery. Если вы не уверены в своих силах советую ознакомится с материалами на веб-сайте <a href="http://learn.javascript.ru" target="_blank">learn.javascript.ru</a>.
</div>

<section class="jquery" id="jquery">
  <h2>Создаем jQuery-плагин</h2>

  <ol class="breadcrumb">
    <li><a href="#jquery">jQuery плагин</a></li>
    <li><a href="#reactjs">ReactJS компонент</a></li>
  </ol>

  <img src="http://taswar.zeytinsoft.com/wp-content/uploads/2014/05/jquery-logo.png" alt="">

  <p>
    Эта статья призвана дать представление об основных правилах, подходах, дающих наилучшие результаты, и распространённых ошибках, на которые стоит обратить внимание при разработке плагинов для jQuery.
  </p>

  <h3>Приступая к работе</h3>

  <p>Сперва создаём новое свойство-функцию для объекта jQuery, где именем нового свойства будет имя нашего плагина:</p>

  <pre><code class="js">
    jQuery.fn.myPlugin = function() {

      // Тут пишем функционал нашего плагина

    };
  </code></pre>
  

  <p>
    Но постойте, где-же привычный нам значок доллара, который мы все хорошо знаем? Он всё ещё здесь, а чтобы он не конфликтовал с другими библиотеками, которые тоже могут использовать символ доллара, рекомендуется «обернуть» объект jQuery в непосредственно выполняемую функцию-выражение (IIFE, Immediately Invoked Function Expression), которое связывает объект jQuery с символом "$", чтобы он не был переопределён другой библиотекой во время выполнения.
  </p>

  <pre><code class="js">
    (function( $ ) {
      $.fn.myPlugin = function() {

      // Тут пишем функционал нашего плагина

      };
    })(jQuery);
  </code></pre>
  
  <p>Так лучше. Теперь внутри этого замыкания (closure), мы можем использовать знак доллара как нам заблагорассудится.</p>

  <h3>Контекст</h3>

  <p>
    Теперь у нас есть оболочка, внутри которой мы можем начать писать код плагина. Но прежде чем мы начнём, я хотел бы сказать несколько слов о контексте. В непосредственной области видимости функции нашего плагина ключевое слово «this» ссылается на объект jQuery, для которого был вызван этот плагин.
  </p>

  <p>
    И тут часто ошибаются, полагая, что в других вызовах, где jQuery принимает callback-функцию, «this» указывает на элемент DOM-дерева. Что, в свою очередь, приводит к тому, что разработчики дополнительно оборачивают «this» в функцию jQuery.
  </p>

  <pre><code class="js">
      (function( $ ){

        $.fn.myPlugin = function() {
        
          // нет необходимости писать $(this), так как "this" - это уже объект jQuery
          // выражение $(this) будет эквивалентно $($('#element'));
            
          this.fadeIn('normal', function(){

            // тут "this" - это элемент дерева DOM

          });

        };
      })( jQuery );
  </code></pre>
  
  <pre><code class="js">
    $('#element').myPlugin();
  </code></pre>

  <h3>Основы</h3>

  <p>
    Теперь, когда мы понимаем как работать с контекстом, напишем плагин jQuery, который выполняет полезную работу.
  </p>

  <pre><code class="js">
    (function( $ ){

      $.fn.maxHeight = function() {
      
        var max = 0;

        this.each(function() {
          max = Math.max( max, $(this).height() );
        });

        return max;
      };
    })( jQuery );
  </code></pre>

  <pre><code class="js">
    var tallest = $('div').maxHeight(); // Возвращает высоту самого высокого div-а
  </code></pre>

  <p>Это простой плагин, который, используя .height(), возвращает нам высоту самого высокого div-а на странице.</p>

  <h3>Поддерживаем возможность цепочек вызовов</h3>

  <p>
    Предыдущий пример рассчитывает и возвращает целочисленное значение наиболее высокого div-а на странице. Обычно, плагин модифицирует набор элементов дерева DOM, и передает их дальше, следующему методу в цепочке вызовов. В этом заключается красота jQuery и одна из причин его популярности. Итак, чтобы ваш плагин поддерживал цепочки вызовов, убедитесь в том, что ваш плагин возвращает this.
  </p>

  <pre><code class="js">
    (function( $ ){

      $.fn.lockDimensions = function( type ) {  

        return this.each(function() {

          var $this = $(this);

          if ( !type || type == 'width' ) {
            $this.width( $this.width() );
          }

          if ( !type || type == 'height' ) {
            $this.height( $this.height() );
          }

        });

      };
    })( jQuery );   
  </code></pre>

  <pre><code class="js">
    $('div').lockDimensions('width').css('color', 'red');
  </code></pre>

  <p>
    Так как плагин возвращает this в своей непосредственной области видимости, следовательно он поддерживает цепочки вызовов, и коллекция jQuery может продолжать обрабатываться методами jQuery, например, такими как .css. И, если ваш плагин не должен возвращать никакого рассчитанного значения, вы должны всегда возвращать this в непосредственной области видимости функции плагина. Аргументы, которые передаются в плагин при вызове, передаются в непосредственную область видимости функции плагина. Так, в предыдущем примере, строка 'width' является значением параметра «type» для функции плагина.
  </p>

  <h3>Настройки и умолчания</h3>

  <p>
    Для более сложных и настраиваемых плагинов, предоставляющих большое количество возможностей настройки лучше иметь настройки по-умолчанию, которые расширяются (с помощью <a href="https://api.jquery.com/jquery.extend/">$.extend</a>) во время вызова плагина.
  </p>

  <p>
    Так вместо вызова плагина с большим количеством параметром, вы можете вызвать его с одним параметром, являющимся объектным литералом настроек, которые вы хотите расширить. Например, вы можете сделать так:
  </p>

  <pre><code class="js">
    (function( $ ){

      $.fn.tooltip = function( options ) {  

        // Создаём настройки по-умолчанию, расширяя их с помощью параметров, которые были переданы
        var settings = $.extend( {
          'location'         : 'top',
          'background-color' : 'blue'
        }, options);

        return this.each(function() {        

          // Тут пишем код плагина tooltip

        });

      };
    })( jQuery );
  </code></pre>

  <pre><code class="js">
    $('div').tooltip({
      'location' : 'left'
    });
  </code></pre>

  <p>
    В этом примере после вызова плагина tooltip с указанными параметрами, значение параметра местоположения ('location') переопределяется значением 'left', в то время, когда значение параметра 'background-color' остаётся равным 'blue'. И в итоге объект settings содержит следующие значения:
  </p>

  <pre><code class="js">
    {
      'location'         : 'left',
      'background-color' : 'blue'
    }
  </code></pre>

  <p>
    Это хороший способ создавать гибко-настраиваемые плагины без необходимости определять каждый из доступных параметров настройки.
  </p>

  <h3>
    Определение пространства имен
  </h3>

  <p>
    Корректное определение пространства имён для плагина очень важно и обеспечивает достаточно низкую вероятность переопределения другим плагином или кодом, выполняющимся на той-же странице. Вдобавок определение пространства имён упрощает разработку, так как упрощается отслеживание нужных методов, событий и данных.
  </p>

  <h4>
    Методы плагина
  </h4>

  <p>
    При любых обстоятельствах один плагин должен определять не более одного пространства имён для объекта jQuery.fn.
  </p>

  <pre><code class="js">
    (function( $ ){

      $.fn.tooltip = function( options ) { 
        // НЕ НАДО
      };
      $.fn.tooltipShow = function( ) {
        // ТАК
      };
      $.fn.tooltipHide = function( ) { 
        // ДЕЛАТЬ
      };
      $.fn.tooltipUpdate = function( content ) { 
        // !!!  
      };

    })( jQuery );
  </code></pre>

  <p>
    Подобная практика не приветствуется, так как она загрязняет пространство имён $.fn. Чтобы избежать этого, объедините все методы вашего плагина в один объектный литерал и вызывайте их, передавая имя метода в виде строки.
  </p>

  <pre><code class="js">
    (function( $ ){

      var methods = {
        init : function( options ) { 
          // А ВОТ ЭТОТ
        },
        show : function( ) {
          // ПОДХОД
        },
        hide : function( ) {
          // ПРАВИЛЬНЫЙ
        },
        update : function( content ) {
          // !!!
        }
      };

      $.fn.tooltip = function( method ) {
        
        // логика вызова метода
        if ( methods[method] ) {
          return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error( 'Метод с именем ' +  method + ' не существует для jQuery.tooltip' );
        } 
      };

    })( jQuery );

    // вызывает метод init
    $('div').tooltip(); 

    // вызывает метод init
    $('div').tooltip({
      foo : 'bar'
    });
  </code></pre>

  <pre><code class="js">
    // вызывает метод hide
    $('div').tooltip('hide');
  </code></pre>

  <pre><code class="js">
    // вызывает метод update
    $('div').tooltip('update', 'Теперь тут новое содержимое');
  </code></pre>

  <p>
    Этот тип архитектуры плагинов позволяет вам инкапсулировать все ваши методы в родительском по отношению к плагину замыкании (closure), и вызывать их, сперва передавая имя метода как строку, а затем передавая любые дополнительные параметры для этого метода. Этот подход к инкапсуляции методов является стандартом в сообществе разработчиков jQuery-плагинов и применяется в бесчисленном множестве плагинов и виджетов в jQueryUI.
  </p>

  <h4>События</h4>

  <p>
    Малоизвестная особенность метода bind заключается в том, что он позволяет определять пространства имён для связанных событий. Если ваш плагин связывает некую функциональность с каким-нибудь событием, то хорошим тоном будет задать пространство имён для этого события. И если позднее вам потребуется отвязать эту функциональность от события, то вы сможете это сделать, не затрагивая функциональность, которая может быть прикреплена к этому-же типу события. 
  </p>

  <p>
    Вы можете определить пространство имён для ваших событий, просто добавив точку и название пространства имён к названию типа события, с которым вы связываетесь.
  </p>

  <pre><code class="js">
    (function( $ ){

      var methods = {
         init : function( options ) {

           return this.each(function(){
             $(window).bind('resize.tooltip', methods.reposition);
           });

         },
         destroy : function( ) {

           return this.each(function(){
             $(window).unbind('.tooltip');
           })

         },
         reposition : function( ) { 
           // ... 
         },
         show : function( ) { 
           // ... 
         },
         hide : function( ) {
           // ... 
         },
         update : function( content ) { 
           // ...
         }
      };

      $.fn.tooltip = function( method ) {
        
        if ( methods[method] ) {
          return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error( 'Метод с именем ' +  method + ' не существует для jQuery.tooltip' );
        }    
      
      };

    })( jQuery );
  </code></pre>

  <pre><code class="js">
    $('#fun').tooltip();
    // Некоторое время спустя...
    $('#fun').tooltip('destroy');
  </code></pre>

  <p>
    В этом примере, когда плагин tooltip проинициализировался с помощью метода init, он связывает метод reposition с событием resize (изменение размеров) окна, с указанием пространства имён 'tooltip'. Позднее, когда разработчик намерен разрушить объект tooltip, он может отвязать все прикреплённые к плагину обработчики путём указания соответствующего пространства имён. В данном случае — 'tooltip' для метода unbind. Это позволяет безопасно отвязать обработчики от событий без риска случайно отвязать событие, связанное с обработчиком вне данного плагина.
  </p>

  <h4>Данные</h4>

  <p>
    Зачастую во время разработки плагинов, вы можете столкнуться с необходимостью сохранения состояний или проверки, был-ли плагин уже проинициализирован для указанного элемента. Использование метода data из jQuery — это хороший способ отслеживать состояние переменных для каждого элемента. Однако вместо того, чтобы отслеживать множество отдельных вызовов data с разными именами, рекомендуется использовать один объектный литерал, который будет объединять все ваши переменные под одной крышей и вы будете обращаться к этому объекту через одно пространство имён.
  </p>

  <pre><code class="js html">
    (function( $ ){

      var methods = {
         init : function( options ) {

           return this.each(function(){
             
             var $this = $(this),
                 data = $this.data('tooltip'),
                 tooltip = $('div', {
                   text : $this.attr('title')
                 });
             
             // Если плагин ещё не проинициализирован
             if ( ! data ) {
             
               /*
                * Тут выполняем инициализацию
               */

               $(this).data('tooltip', {
                   target : $this,
                   tooltip : tooltip
               });

             }
           });
         },
         destroy : function( ) {

           return this.each(function(){

             var $this = $(this),
                 data = $this.data('tooltip');

             // пространства имён рулят!!11
             $(window).unbind('.tooltip');
             data.tooltip.remove();
             $this.removeData('tooltip');

           })

         },
         reposition : function( ) { // ... },
         show : function( ) { // ... },
         hide : function( ) { // ... },
         update : function( content ) { // ...}
      };

      $.fn.tooltip = function( method ) {
        
        if ( methods[method] ) {
          return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
          return methods.init.apply( this, arguments );
        } else {
          $.error( 'Метод с именем ' +  method + ' не существует для jQuery.tooltip' );
        }    
      
      };

    })( jQuery );
  </code></pre>

  <p>
    Использование data позволяет отслеживать состояние переменных между вызовами вашего плагина. Определение пространства имён для data в одном объектном литерале, обеспечивает, как простой централизованный доступ к свойствам плагина, так и сокращает пространство имён data, что позволяет просто удалять ненужные данные по мере необходимости.
  </p>

  <h3>Заключение и полезные советы</h3>

  <p>
    Создание плагинов для jQuery позволяет извлечь максимальную пользу из этой библиотеки и абстрагировать свои наиболее удачные решения и часто используемые функции в повторно используемый код, который может сохранить вам время и сделает процесс разработки более эффективным. Ниже представлена краткая выдержка того, что следует помнить во время разработки своего jQuery плагина.
  </p>

  <p><mark>Полезные советы:</mark></p>

  <ul>
    <li>
    Всегда оборачивайте свой плагин в конструкцию: 
    <pre><code class="js">
      (function( $ ){ 
                /* тут пишем код плагина */ 
      })( jQuery );
    </code></pre>
    <em>Примечание переводчика: в оригинальной статье эта синтаксическая конструкция названа замыканием (closure), но это не замыкание, а непосредственно вызываемая функция (IIFE).</em>
    </li>
    <li>
      В непосредственной области выполнения функции вашего плагина не оборачивайте this в ненужные синтаксические конструкции.
    </li>
    <li>
      Если только вы не возвращаете из функции плагина какое-то определенное значение, всегда возвращайте ссылку на this для поддержки цепочек вызовов.
    </li>
    <li>
      При необходимости передачи длинного списка параметров, передайте настройки вашего плагина в виде объектного литерала, значения которого будут распространятся на значения по-умолчанию для параметров вашего плагина.
    </li>
    <li>
      Для одного плагина определяйте не более одного пространства имён jQuery.fn.
    </li>
    <li>
      Всегда определяйте пространство имён для ваших методов, событий и данных.
    </li>
  </ul>

</section>


<section class="reactjs" id="reactjs">
  <h2>Краткое руководство по React JS</h2>

  <ol class="breadcrumb">
    <li><a href="#jquery">jQuery плагин</a></li>
    <li><a href="#reactjs">ReactJS компонент</a></li>
  </ol>

  <img src="http://moduscreate.com/wp-content/uploads/2014/03/react-opti.png" alt="">

  <p>
    Статья даст вам краткий обзор того, как строятся интерфейсы с помощью React JS. Вы можете параллельно писать код с помощью <a href="https://github.com/jarsbe/react-starter-kit">starter kit</a>, или просто продолжать читать.
  </p>

  <h3>Концепции</h3>

  <p>React имеет небольшой API, он прост в изучении использовании. Однако, сперва давайте взглянем на несколько концепций.</p>

  <p>
    Элементы — это объекты JavaScript, которые представляют HTML-элементы. Их не существуют в браузере. они описывают DOM-элементы, такие как h1, div, или section.
  </p>

  <p>
    Компоненты — это элементы React, написаные разработчиком. Обычно это части пользовательского интерфейса, которые содержат свою структуру и функциональность. Например, такие как NavBar, LikeButton, или ImageUploader.
  </p>

  <p>
    JSX — это техника создания элементов и компонентов React. Например, это React-элемент, написаный на JSX:
  </p>

  <pre><code class="html">
    &lt;h1&gt;Hello&lt;h1&gt;
    &lt;source&gt;
    //Такой же элемент может быть написан на JavaScript:

    &lt;source lang="JavaScript"&gt;
      React.DOM.h1(null, 'Hello');
    &lt;/source&gt;
  </code></pre>

  <p>
    С JSX требуется гораздо меньше усилий, он трансформируется в JavaScript перед запуском в браузере.
  </p>

  <p>
    Virtual DOM — это дерево React элементов на JavaScript. React отрисовывает Virtual DOM в браузере, чтоб сделать интерфейс видимым. React следит за изменениями в Virtual DOM и автоматически изменяет DOM в браузере так, чтоб он соответствовал виртуальному.
  </p>

  <p>
    С пониманием этих концепций мы можем продолжать использовать React. Мы напишем ряд пользовательских интерфейсов, каждый из которых будет добавлять слой функциональности к предыдущему. В качестве примера, мы напишем фото-ленту на подобии Instagram.
  </p>

  <h3>Рендеринг</h3>

  <p>
    Первым делом происходит рендер виртуального элемента (элемента, или компонента React). Помните, пока виртуальный элемент содержится только в памяти JavaScript. мы должны явно сообщить React отрисовать его в браузере.
  </p>

  <pre><code class="js">
    React.render(&lt;img src='http:tinyurl.comlkevsb9' /&gt;, document.body);
  </code></pre>

  <p>
    Функция render принимает два аргумента: виртуальный элемент и реальный узел DOM. React берёт виртуальный элемент и добавляет его в указанный узел. Теперь изображение можно увидеть в браузере.
  </p>

  <h3>Компоненты</h3>

  <p>
    Компоненты — это душа и сердце React. Это пользовательские элементы. Обычно, они имеют свою уникальную структуру и функциональность.
  </p>

  <pre><code class="js">
    var Photo = React.createClass({

      render: function() {
        return &lt;img src='http:tinyurl.comlkevsb9' /&gt;
      }

    });

    React.render(&lt;Photo /&gt;, document.body);
  </code></pre>

  <p>
    Функция createClass принимает объект, который реализует функцию render.
    Компонент Photo создан и отрисован в теле документа.
  </p>

  <p>
    Этот компонент делает не больше, чем строчка в предыдущем примере, но теперь его можно дополнять функциональностью.
  </p>

  <h3>Свойства</h3>

  <p>
    Под свойствами можно понимать опции компонента. Они предоставляются в качестве аргументов компонента и выглядят так же, как атрибуты HTML.
  </p>

  <pre><code class="js">
    var Photo = React.createClass({

      render: function() {
        return (
          &lt;div className='photo' /&gt;
            &lt;img src=imageURL &gt;
            &lt;span&gt;&lt;/span&gt;
          &lt;/div&gt;
        )
      }
    });

    React.render(&lt;Photo imageURL='http:tinyurl.comlkevsb9' caption='New York!' /&gt;, document.body);
  </code></pre>

  <p>
    В функции render компоненту Photo переданы 2 свойства: imageURL и caption.
  </p>

  <p>
    Внутри пользовательской функции render, свойство imageURL используется в качестве src для изображения. Свойство caption используется как текст элемента span.
  </p>

  <p>Стоит отметить, что свойства компонента неизменяемы. Если у компонента есть изменяемые свойства, используйте состояние.</p>

  <h3>Состояния</h3>

  <p>
    Состояние — это специальный объект внутри компонента. Он хранит данные, которые могут изменятся с течением времени.
  </p>

  <pre><code class="js">
    var Photo = React.createClass({

      toggleLiked: function() {
        this.setState({
          liked: !this.state.liked
        });
      },

      getInitialState: function() {
        return {
          liked: false
        }
      },

      render: function() {
        var buttonClass = this.state.liked ? 'active' : '';

        return (
          &lt;div className='photo'&gt;
            &lt;img src= /&gt;

            &lt;div className='bar'&gt;
              &lt;button onClick={this.toggleLiked} className={buttonClass} /&gt;
                Add
              &lt;/button&gt;
              &lt;span>&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        )
      }
    });

    React.render(&lt;Photo src='http:tinyurl.comlkevsb9' caption='New York!' /&gt;, document.body);
  </code></pre>

  <p>
    Наличия состояния у объекта вносит небольшую сложность.
    У компонента появляется новая фунцкия getInitialState. React вызывает её после инициализации компонента. В ней устанавливается начальное состояние (что подразумевает название функции).
  </p>

  <p>
    Также у компонента появляется функция toggleLiked. Она с помощью функции setState, переключает состояние liked.
  </p>

  <p>
    Внутри функции render, переменной buttonClass присваивается значение «active», либо пустая строка, в зависимости от состояния liked.
  </p>

  <p>
    buttonClass используется, как класс кнопки элемента. У кнопки также имеется обработчик события onClick, который вызывает функцию toggleLiked.
  </p>

  <p>
    Вот, что происходит после отрисовки компонента:
  </p>

  <p>
    — После нажатия кнопки вызывается toggleLiked <br>
    — Изменяется состояние liked <br> 
    — React перерисовывает компонент в Virtual DOM <br>
    — Новый Virtual DOM сравнивается с предыдущим <br>
    — React изолирует изменения и обновляет их в DOM браузера <br>
  </p>

  <p>
    В данном случае, React изменит имя класса кнопки.
  </p>

  <h3>Композиция</h3>

  <p>
    Композиция означает комбинирование меньших компонентов при формировании большего. Например, компонент Photo может быть использован внутри компонента PhotoGallery. Примерно таким образом:
  </p>

  <pre><code class="js">
    var Photo = React.createClass({

      toggleLiked: function() {
        this.setState({
          liked: !this.state.liked
        });
      },

      getInitialState: function() {
        return {
          liked: false
        }
      },

      render: function() {
        var buttonClass = this.state.liked ? 'active' : '';

        return (
          &lt;div className='photo'&gt;
            &lt;img src= /&gt;

            &lt;div className='bar'&gt;
              &lt;button onClick={this.toggleLiked} className={buttonClass}&gt;
                
              &lt;/button&gt;
              &lt;span&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        )
      }
    });

    var PhotoGallery = React.createClass({

      getDataFromServer: function() {
        return [{
          url: 'http:tinyurl.comlkevsb9',
          caption: 'New York!'
        },
        {
          url: 'http:tinyurl.commxkwh56',
          caption: 'Cows'
        },
        {
          url: 'http:tinyurl.comnc7jv28',
          caption: 'Scooters'
        }];
      },

      render: function() {
        var data = this.getDataFromServer();

        var photos = data.map(function(photo) {
          return &lt;Photo src={photo.url} caption={photo.caption} /&gt;
        });

        return (
          &lt;div className='photo-gallery'&gt;
            {photos}
          &lt;/div&gt;
        )
      }
    });

    React.render(&lt;PhotoGallery /&gt;, document.body);
  </code></pre>

  <p>
    Компонент Photo остался точно таким же, как и был.
  </p>

  <p>
    Появился новый компонент PhotoGallery, который генерирует компоненты Photo. В примере используются поддельные данные сервера, которые возвращают массив из 3 объектов с url и заголовком.
  </p>

  <p>
    В цикле создаются 3 компонента Photo, которые затем подставляются в возвращаемое значение функции render.
  </p>

  <h3>Заключение</h3>

  <p>
    Этого вполне достаточно для того, чтоб начать строить пользовательские интерфейсы с использованием React. Более подробное описание есть в <a href="https://facebook.github.io/react/docs/getting-started.html">ДОКУМЕНТАЦИИ</a> и она крайне рекомендуется к прочтению.
  </p>

</section>

<script src="/vendor/scripts/highlight.js"></script>
